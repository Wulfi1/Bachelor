var probabilities = [null,0.9,0.1,null];
globalStore.probabilities = probabilities;

var init = function(){
globalStore.countEnabled = 0;
globalStore.trace = "";
globalStore.sink = 0;
globalStore.exi_Gateway_1tkqjgp = 0;
globalStore.ent_Gateway_1n619re = 0;
globalStore.source = 1;

globalStore.enabled_58c6dad7_d602_4f86_b032_0a52015c2c2c = false; // None
globalStore.enabled_Activity_0f8yp5g = false; // t1
globalStore.enabled_Activity_1s67x7z = false; // t2
globalStore.enabled_Gateway_1n619re = false; // None

globalStore.fired_58c6dad7_d602_4f86_b032_0a52015c2c2c = 0;
globalStore.fired_Activity_0f8yp5g = 0;
globalStore.fired_Activity_1s67x7z = 0;
globalStore.fired_Gateway_1n619re = 0;

globalStore.vars = {  };

}

var update_enabled_58c6dad7_d602_4f86_b032_0a52015c2c2c = function() {
if(globalStore.source > 0) {
if (!globalStore.enabled_58c6dad7_d602_4f86_b032_0a52015c2c2c) {
globalStore.enabled_58c6dad7_d602_4f86_b032_0a52015c2c2c = true;
globalStore.countEnabled = globalStore.countEnabled + 1;
}
} else {
if (globalStore.enabled_58c6dad7_d602_4f86_b032_0a52015c2c2c) {
globalStore.enabled_58c6dad7_d602_4f86_b032_0a52015c2c2c = false;
globalStore.countEnabled = globalStore.countEnabled - 1;
}
}
}

var update_enabled_Activity_0f8yp5g = function() {
if(globalStore.exi_Gateway_1tkqjgp > 0) {
if (!globalStore.enabled_Activity_0f8yp5g) {
globalStore.enabled_Activity_0f8yp5g = true;
globalStore.countEnabled = globalStore.countEnabled + 1;
}
} else {
if (globalStore.enabled_Activity_0f8yp5g) {
globalStore.enabled_Activity_0f8yp5g = false;
globalStore.countEnabled = globalStore.countEnabled - 1;
}
}
}

var update_enabled_Activity_1s67x7z = function() {
if(globalStore.exi_Gateway_1tkqjgp > 0) {
if (!globalStore.enabled_Activity_1s67x7z) {
globalStore.enabled_Activity_1s67x7z = true;
globalStore.countEnabled = globalStore.countEnabled + 1;
}
} else {
if (globalStore.enabled_Activity_1s67x7z) {
globalStore.enabled_Activity_1s67x7z = false;
globalStore.countEnabled = globalStore.countEnabled - 1;
}
}
}

var update_enabled_Gateway_1n619re = function() {
if(globalStore.ent_Gateway_1n619re > 0) {
if (!globalStore.enabled_Gateway_1n619re) {
globalStore.enabled_Gateway_1n619re = true;
globalStore.countEnabled = globalStore.countEnabled + 1;
}
} else {
if (globalStore.enabled_Gateway_1n619re) {
globalStore.enabled_Gateway_1n619re = false;
globalStore.countEnabled = globalStore.countEnabled - 1;
}
}
}


var fire_58c6dad7_d602_4f86_b032_0a52015c2c2c = function() {
globalStore.source = globalStore.source - 1;
globalStore.exi_Gateway_1tkqjgp = globalStore.exi_Gateway_1tkqjgp + 1;

globalStore.fired_58c6dad7_d602_4f86_b032_0a52015c2c2c = globalStore.fired_58c6dad7_d602_4f86_b032_0a52015c2c2c + 1;



update_enabled_Activity_0f8yp5g();
update_enabled_58c6dad7_d602_4f86_b032_0a52015c2c2c();
update_enabled_Activity_1s67x7z();
}


var fire_Activity_0f8yp5g = function() {
globalStore.exi_Gateway_1tkqjgp = globalStore.exi_Gateway_1tkqjgp - 1;
globalStore.ent_Gateway_1n619re = globalStore.ent_Gateway_1n619re + 1;

globalStore.fired_Activity_0f8yp5g = globalStore.fired_Activity_0f8yp5g + 1;



update_enabled_Activity_0f8yp5g();
update_enabled_Gateway_1n619re();
update_enabled_Activity_1s67x7z();
}


var fire_Activity_1s67x7z = function() {
globalStore.exi_Gateway_1tkqjgp = globalStore.exi_Gateway_1tkqjgp - 1;
globalStore.ent_Gateway_1n619re = globalStore.ent_Gateway_1n619re + 1;

globalStore.fired_Activity_1s67x7z = globalStore.fired_Activity_1s67x7z + 1;



update_enabled_Activity_0f8yp5g();
update_enabled_Gateway_1n619re();
update_enabled_Activity_1s67x7z();
}


var fire_Gateway_1n619re = function() {
globalStore.ent_Gateway_1n619re = globalStore.ent_Gateway_1n619re - 1;
globalStore.sink = globalStore.sink + 1;

globalStore.fired_Gateway_1n619re = globalStore.fired_Gateway_1n619re + 1;



update_enabled_Gateway_1n619re();
}


var getXMLtag = function (type) {
if (type.includes("Double")) {
return "float";
} else if (type.includes("Integer")) {
return "integer";
} else if (type.includes("Boolean")) {
return "boolean";
}
return "string";
}

var log_transition = function(transition) {
if (transition !== "None") {
globalStore.xesOutput += "<event>\n";
globalStore.xesOutput +=  "<string key=\"concept:name\" value=\"" + transition + "\"/>\n";
globalStore.xesOutput +=  "</event>\n";
globalStore.trace += globalStore.xesOutput;
}
};

var simulator_loop = function(steps) {

globalStore.xesOutput = "";

var enabledTransitions = filter(function(x) {
return (x == 0 && globalStore.enabled_58c6dad7_d602_4f86_b032_0a52015c2c2c)||
(x == 1 && globalStore.enabled_Activity_0f8yp5g)||
(x == 2 && globalStore.enabled_Activity_1s67x7z)||
(x == 3 && globalStore.enabled_Gateway_1n619re);
}, [0, 1, 2, 3]);

if (steps <= 0) {
return;
}

if (enabledTransitions.length == 0) {
return;
}

if (globalStore.sink > 0) {
return;
}

// build weight vector for enabled transitions
var weights = map(function(i) {
  var p = globalStore.probabilities[i];
  return (typeof p === 'number') ? p : 1;
}, enabledTransitions);

// compute total weight via reduce (no for‐loops in WebPPL)
var totalWeight = reduce(function(acc, w) {
  return acc + w;
}, 0, weights);

// normalize weights into a probability vector ps
var ps = map(function(w) {
  return w / totalWeight;
}, weights);

// debug print—uncomment if you need to inspect
// console.log('enabled=', enabledTransitions, 'weights=', weights, 'ps=', ps);

var transition = sample(Categorical({ vs: enabledTransitions, ps: ps }));

if (transition == 0) {
  log_transition("None");
  fire_58c6dad7_d602_4f86_b032_0a52015c2c2c();
}
else if (transition == 1) {
  log_transition("t1");
  fire_Activity_0f8yp5g();
}
else if (transition == 2) {
  log_transition("t2");
  fire_Activity_1s67x7z();
}
else if (transition == 3) {
  log_transition("None");
  fire_Gateway_1n619re();
}
else {
  console.log("Selected illegal transition; should never happen.");
}
simulator_loop(steps - 1);
}

var simulator = function(){
init();
update_enabled_58c6dad7_d602_4f86_b032_0a52015c2c2c();
update_enabled_Activity_0f8yp5g();
update_enabled_Activity_1s67x7z();
update_enabled_Gateway_1n619re();

globalStore.trace += "<trace>\n";

simulator_loop(10);

globalStore.trace += "</trace>\n";

console.log(globalStore.trace);

return;
}

var dist = Infer({
method: 'forward', 
samples: 1000,
},simulator);

